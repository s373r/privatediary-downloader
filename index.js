/**
 * Created by s3v3r on 26/07/17.
 */

'use strict';

import { Selector } from 'testcafe';
import * as fs from 'fs';

fixture `Getting Started`
    .page `http://privatediary.net/`
    .beforeEach(async t => {
        const userName = 'jyhifnkgb_emltmp.com';
        const password = 'jyhifnkgb@emltmp.com';

        await t
            .typeText('#UserName', userName)
            .typeText('#Password', password)
            .click('input[type=submit]');

        const createNewEntryButtonExist =
            Selector('a').filter(node => node.textContent === 'Create new entry').exists;

        // checks success of auth
        await t.expect(createNewEntryButtonExist).ok();

        t.fixtureCtx.userName = userName;
    });

test('Grub note URLs', async t => {
    const entriesSummaryTextSelector =
        'body > div.container.body-content > div:nth-child(2) > div.col-md-9';
    const rawEntriesSummaryText = await Selector(entriesSummaryTextSelector).textContent;
    const regex = /Total entries: (\d+) \| Page: 1 of (\d+)/g;
    let   match = regex.exec(rawEntriesSummaryText);

    const noteCount = match[1];
    const pageCount = match[2];

    let   noteUrls  = [];
    let   pageNo    = 1;

    await t.expect(noteCount).notEql(0);

    do {
        const readMoreButtons      = Selector('a').filter(node => node.textContent === 'Read more ');
        const readMoreButtonsCount = await readMoreButtons.count;

        for (let i = 0; i < readMoreButtonsCount; ++i) {
            const readMoreButton = readMoreButtons.nth(i);
            const noteUrl        = await readMoreButton.getAttribute('href');
            noteUrls.push(noteUrl);
        }

        const links      = Selector('a').filter(node => node.hasAttribute('href'));
        const linksCount = await links.count;

        for (let i = 0; i < linksCount; ++i) {
            const link = links.nth(i);
            const href = await link.getAttribute('href');

            if (href === "/?page=" + (pageNo + 1)) {
                await t.click(link);
                break;
            }
        }

        pageNo += 1;
    } while (pageNo <= pageCount);

    // checks count of notes
    await t.expect(noteCount).eql(noteUrls.length.toString());

    t.fixtureCtx.noteUrls = noteUrls;
});

test('Grub notes one by one', async t => {
    let noteUrls = t.fixtureCtx.noteUrls;
    let   notes  = [];

    for (let index in noteUrls) {
        await t.navigateTo(noteUrls[index]);

        // Because of !@#ing "Uncaught ReferenceError: jQuery is not defined"
        // on "http://privatediary.net/Records/Edit/", therefore we have the hard way :(
        const noteSelector = 'body > div.container.body-content > div:nth-child(2)';
        const rawNoteText  = await Selector(noteSelector).innerText;
        let   noteLines    = rawNoteText.split('\n');

        const title     = noteLines[0];
        const timeStamp = noteLines[noteLines.length - 2].trim();
        // drop title, 2 blank lines and timestamp
        const text = noteLines.slice(2, noteLines.length - 2).join('\n');

        notes.push({
            title     : title,
            timeStamp : timeStamp,
            text      : text
        });
    }
    t.fixtureCtx.notes = notes;
});

test('Create text file', async t => {
    const notes = t.fixtureCtx.notes;

    const stream = fs.createWriteStream('output/' + t.fixtureCtx.userName + '.txt');
    stream.once('open', (fd) => {
        stream.write('Generated by https://github.com/s373r/privatediary-downloader\n');
        stream.write('\n');

        for (let index in notes) {
            const note = notes[index];

            stream.write(note.title  + '\n');
            stream.write(note.timeStamp + '\n');
            stream.write(note.text + '\n');
            stream.write('\n');
        }

        stream.end();
    });
});